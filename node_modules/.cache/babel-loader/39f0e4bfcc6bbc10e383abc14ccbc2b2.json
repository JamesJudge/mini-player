{"ast":null,"code":"const hexToRgb = hex => hex.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, (m, r, g, b) => `#${r + r + g + g + b + b}`).substring(1).match(/.{2}/g).map(x => parseInt(x, 16));\n\nconst isElementInViewport = (el, percentage = 50) => {\n  const {\n    innerHeight,\n    innerWidth\n  } = window;\n  const {\n    clientHeight,\n    clientWidth\n  } = document.documentElement;\n  const rect = el.getBoundingClientRect();\n  const offScreenTop = 0 - rect.height * percentage / 100;\n  return rect.top >= offScreenTop && rect.left >= 0 && rect.bottom <= (innerHeight || clientHeight) && rect.right <= (innerWidth || clientWidth);\n};\n\nexport { hexToRgb, isElementInViewport };","map":{"version":3,"sources":["/home/james/src/mini-player/src/components/mini-player/utils.js"],"names":["hexToRgb","hex","replace","m","r","g","b","substring","match","map","x","parseInt","isElementInViewport","el","percentage","innerHeight","innerWidth","window","clientHeight","clientWidth","document","documentElement","rect","getBoundingClientRect","offScreenTop","height","top","left","bottom","right"],"mappings":"AAAA,MAAMA,QAAQ,GAAIC,GAAD,IAASA,GAAG,CAC1BC,OADuB,CAEtB,kCAFsB,EAGtB,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,KAAiB,IAAGF,CAAC,GAAGA,CAAJ,GAAQC,CAAR,GAAYA,CAAZ,GAAgBC,CAAhB,GAAoBA,CAAE,EAHpB,EAKvBC,SALuB,CAKb,CALa,EAMvBC,KANuB,CAMjB,OANiB,EAOvBC,GAPuB,CAOlBC,CAAD,IAAOC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CAPI,CAA1B;;AASA,MAAME,mBAAmB,GAAG,CAACC,EAAD,EAAKC,UAAU,GAAG,EAAlB,KAAyB;AACnD,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA8BC,MAApC;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAgCC,QAAQ,CAACC,eAA/C;AAEA,QAAMC,IAAI,GAAGT,EAAE,CAACU,qBAAH,EAAb;AAEA,QAAMC,YAAY,GAAG,IAAKF,IAAI,CAACG,MAAL,GAAcX,UAAf,GAA6B,GAAtD;AAEA,SACEQ,IAAI,CAACI,GAAL,IAAYF,YAAZ,IACGF,IAAI,CAACK,IAAL,IAAa,CADhB,IAEGL,IAAI,CAACM,MAAL,KAAgBb,WAAW,IAAIG,YAA/B,CAFH,IAGGI,IAAI,CAACO,KAAL,KAAeb,UAAU,IAAIG,WAA7B,CAJL;AAMD,CAdD;;AAgBA,SAASnB,QAAT,EAAmBY,mBAAnB","sourcesContent":["const hexToRgb = (hex) => hex\n  .replace(\n    /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n    (m, r, g, b) => `#${r + r + g + g + b + b}`,\n  )\n  .substring(1)\n  .match(/.{2}/g)\n  .map((x) => parseInt(x, 16));\n\nconst isElementInViewport = (el, percentage = 50) => {\n  const { innerHeight, innerWidth } = window;\n  const { clientHeight, clientWidth } = document.documentElement;\n\n  const rect = el.getBoundingClientRect();\n\n  const offScreenTop = 0 - (rect.height * percentage) / 100;\n\n  return (\n    rect.top >= offScreenTop\n    && rect.left >= 0\n    && rect.bottom <= (innerHeight || clientHeight)\n    && rect.right <= (innerWidth || clientWidth)\n  );\n};\n\nexport { hexToRgb, isElementInViewport };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/james/src/mini-player/src/components/mini-player/MiniPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Placeholder from './placeholder';\nimport PlayerControls from './PlayerControls';\nimport { CONTROLS, POSITION } from './config';\nimport { isElementInViewport } from './utils';\nimport './MiniPlayer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CORNER_SPACE = 32;\nconst DEFAULT_POSITION = 'auto';\nconst TRANSITION = '200ms ease-in-out';\n\nconst MiniPlayer = props => {\n  _s();\n\n  const {\n    IVSPlayer\n  } = window;\n  const {\n    isPlayerSupported\n  } = IVSPlayer;\n  const {\n    controls = [CONTROLS.mute, CONTROLS.close, CONTROLS.resize],\n    position = POSITION.bottomRight,\n    height = 154,\n    width = 274,\n    streamUrl,\n    transition\n  } = props;\n  const [loading, setLoading] = useState(true);\n  const [isMiniPlayer, setIsMiniPlayer] = useState(false);\n  const [muted, setMuted] = useState(false);\n  const [playerPosition, setPlayerPosition] = useState({});\n  const [playerSize, setPlayerSize] = useState({});\n  const player = useRef(null);\n  const playerBaseEl = useRef(null);\n  const videoEl = useRef(null);\n  const visibleRef = useRef(null); // handle case when autoplay with sound is blocked by browser\n\n  useEffect(() => {\n    if (!player.current) return;\n    setMuted(player.current.isMuted());\n  }, [loading]);\n  const updatePlayer = useCallback(isMini => {\n    let top = DEFAULT_POSITION;\n    let right = DEFAULT_POSITION;\n    let bottom = DEFAULT_POSITION;\n    let left = DEFAULT_POSITION;\n    let targetPosition = 0;\n    let targetHeight = '100%';\n    let targetWidth = '100%';\n\n    if (isMini) {\n      targetPosition = `${CORNER_SPACE}px`;\n      targetHeight = `${height}px`;\n      targetWidth = `${width}px`;\n    }\n\n    switch (position) {\n      case POSITION.topLeft:\n        top = targetPosition;\n        left = targetPosition;\n        break;\n\n      case POSITION.topRight:\n        top = targetPosition;\n        right = targetPosition;\n        break;\n\n      case POSITION.bottomLeft:\n        bottom = targetPosition;\n        left = targetPosition;\n        break;\n\n      default:\n        bottom = targetPosition;\n        right = targetPosition;\n    }\n\n    setPlayerSize({\n      height: targetHeight,\n      width: targetWidth\n    });\n    setPlayerPosition({\n      top,\n      right,\n      bottom,\n      left\n    });\n  }, [height, width, position]);\n  useEffect(() => {\n    const {\n      ENDED,\n      PLAYING,\n      READY\n    } = IVSPlayer.PlayerState;\n    const {\n      ERROR\n    } = IVSPlayer.PlayerEventType;\n\n    if (!isPlayerSupported) {\n      console.warn('The current browser does not support the Amazon IVS player.');\n      return;\n    }\n\n    const onStateChange = () => {\n      const playerState = player.current.getState();\n      console.log(`Player State - ${playerState}`);\n      setLoading(playerState !== PLAYING);\n    };\n\n    const onError = err => {\n      console.warn('Player Event - ERROR:', err);\n    };\n\n    player.current = IVSPlayer.create();\n    player.current.attachHTMLVideoElement(videoEl.current);\n    player.current.load(streamUrl);\n    player.current.play();\n    player.current.addEventListener(READY, onStateChange);\n    player.current.addEventListener(PLAYING, onStateChange);\n    player.current.addEventListener(ENDED, onStateChange);\n    player.current.addEventListener(ERROR, onError);\n    return () => {\n      player.current.removeEventListener(READY, onStateChange);\n      player.current.removeEventListener(PLAYING, onStateChange);\n      player.current.removeEventListener(ENDED, onStateChange);\n      player.current.removeEventListener(ERROR, onError);\n    };\n  }, [IVSPlayer, isPlayerSupported, streamUrl]);\n  useEffect(() => {\n    const onVisibilityChange = () => {\n      const visible = isElementInViewport(playerBaseEl.current);\n      if (visible === visibleRef.current) return;\n      visibleRef.current = visible;\n\n      if (visible && player.current.isPaused()) {\n        player.current.play();\n      }\n\n      if (!visible) {\n        const playerRect = playerBaseEl.current.getBoundingClientRect();\n        setPlayerSize({\n          height: `${playerRect.height}px`,\n          width: `${playerRect.width - CORNER_SPACE}px`\n        });\n      }\n\n      setTimeout(() => {\n        setIsMiniPlayer(!visible);\n      }, 100);\n    };\n\n    if (!isPlayerSupported) {\n      return;\n    }\n\n    onVisibilityChange();\n    updatePlayer(visibleRef.current);\n    window.addEventListener('scroll', onVisibilityChange);\n    window.addEventListener('resize', onVisibilityChange);\n    return () => {\n      window.removeEventListener('scroll', onVisibilityChange);\n      window.removeEventListener('resize', onVisibilityChange);\n    };\n  }, [isPlayerSupported, updatePlayer]);\n  useEffect(() => {\n    updatePlayer(isMiniPlayer);\n  }, [isMiniPlayer, updatePlayer]);\n\n  const close = () => {\n    player.current.pause();\n    setIsMiniPlayer(false);\n  };\n\n  const resize = () => {\n    const {\n      offsetLeft,\n      offsetTop\n    } = playerBaseEl.current;\n    window.scrollTo({\n      top: offsetTop - 20,\n      left: offsetLeft,\n      behavior: 'smooth'\n    });\n  };\n\n  const toggleMute = () => {\n    const shouldMute = !player.current.isMuted();\n    player.current.setMuted(shouldMute);\n    setMuted(shouldMute);\n  };\n\n  if (!isPlayerSupported) {\n    return null;\n  }\n\n  const {\n    top,\n    right,\n    bottom,\n    left\n  } = playerPosition;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MiniPlayer\",\n    ref: playerBaseEl,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MiniPlayer-videoBox\",\n      children: [/*#__PURE__*/_jsxDEV(Placeholder, {\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `MinPlayer-video${isMiniPlayer ? ' small' : ''}`,\n        style: {\n          top,\n          right,\n          bottom,\n          left,\n          width: `${playerSize.width}`,\n          height: `${playerSize.height}`,\n          transition: transition && isMiniPlayer ? `height ${TRANSITION}, width ${TRANSITION}` : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoEl,\n          playsInline: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), isMiniPlayer && /*#__PURE__*/_jsxDEV(PlayerControls, {\n          controls: controls,\n          muted: muted,\n          onClose: close,\n          onResize: resize,\n          onMute: toggleMute\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MiniPlayer, \"gDJpberAwJxuNVfFNo3eOrgIVOE=\");\n\n_c = MiniPlayer;\nexport default MiniPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MiniPlayer\");","map":{"version":3,"sources":["/home/james/src/mini-player/src/components/mini-player/MiniPlayer.jsx"],"names":["React","useCallback","useEffect","useRef","useState","Placeholder","PlayerControls","CONTROLS","POSITION","isElementInViewport","CORNER_SPACE","DEFAULT_POSITION","TRANSITION","MiniPlayer","props","IVSPlayer","window","isPlayerSupported","controls","mute","close","resize","position","bottomRight","height","width","streamUrl","transition","loading","setLoading","isMiniPlayer","setIsMiniPlayer","muted","setMuted","playerPosition","setPlayerPosition","playerSize","setPlayerSize","player","playerBaseEl","videoEl","visibleRef","current","isMuted","updatePlayer","isMini","top","right","bottom","left","targetPosition","targetHeight","targetWidth","topLeft","topRight","bottomLeft","ENDED","PLAYING","READY","PlayerState","ERROR","PlayerEventType","console","warn","onStateChange","playerState","getState","log","onError","err","create","attachHTMLVideoElement","load","play","addEventListener","removeEventListener","onVisibilityChange","visible","isPaused","playerRect","getBoundingClientRect","setTimeout","pause","offsetLeft","offsetTop","scrollTo","behavior","toggleMute","shouldMute"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport Placeholder from './placeholder';\nimport PlayerControls from './PlayerControls';\n\nimport { CONTROLS, POSITION } from './config';\nimport { isElementInViewport } from './utils';\n\nimport './MiniPlayer.css';\n\nconst CORNER_SPACE = 32;\nconst DEFAULT_POSITION = 'auto';\nconst TRANSITION = '200ms ease-in-out';\n\nconst MiniPlayer = (props) => {\n  const { IVSPlayer } = window;\n  const { isPlayerSupported } = IVSPlayer;\n\n  const {\n    controls = [CONTROLS.mute, CONTROLS.close, CONTROLS.resize],\n    position = POSITION.bottomRight,\n    height = 154,\n    width = 274,\n    streamUrl,\n    transition,\n  } = props;\n\n  const [loading, setLoading] = useState(true);\n  const [isMiniPlayer, setIsMiniPlayer] = useState(false);\n  const [muted, setMuted] = useState(false);\n\n  const [playerPosition, setPlayerPosition] = useState({});\n  const [playerSize, setPlayerSize] = useState({});\n\n  const player = useRef(null);\n  const playerBaseEl = useRef(null);\n  const videoEl = useRef(null);\n  const visibleRef = useRef(null);\n\n  // handle case when autoplay with sound is blocked by browser\n  useEffect(() => {\n    if (!player.current) return;\n\n    setMuted(player.current.isMuted());\n  }, [loading]);\n\n  const updatePlayer = useCallback(\n    (isMini) => {\n      let top = DEFAULT_POSITION;\n      let right = DEFAULT_POSITION;\n      let bottom = DEFAULT_POSITION;\n      let left = DEFAULT_POSITION;\n\n      let targetPosition = 0;\n      let targetHeight = '100%';\n      let targetWidth = '100%';\n\n      if (isMini) {\n        targetPosition = `${CORNER_SPACE}px`;\n        targetHeight = `${height}px`;\n        targetWidth = `${width}px`;\n      }\n\n      switch (position) {\n        case POSITION.topLeft:\n          top = targetPosition;\n          left = targetPosition;\n\n          break;\n        case POSITION.topRight:\n          top = targetPosition;\n          right = targetPosition;\n\n          break;\n        case POSITION.bottomLeft:\n          bottom = targetPosition;\n          left = targetPosition;\n\n          break;\n        default:\n          bottom = targetPosition;\n          right = targetPosition;\n      }\n\n      setPlayerSize({\n        height: targetHeight,\n        width: targetWidth,\n      });\n      setPlayerPosition({\n        top,\n        right,\n        bottom,\n        left,\n      });\n    },\n    [height, width, position],\n  );\n\n  useEffect(() => {\n    const { ENDED, PLAYING, READY } = IVSPlayer.PlayerState;\n    const { ERROR } = IVSPlayer.PlayerEventType;\n\n    if (!isPlayerSupported) {\n      console.warn(\n        'The current browser does not support the Amazon IVS player.',\n      );\n\n      return;\n    }\n\n    const onStateChange = () => {\n      const playerState = player.current.getState();\n\n      console.log(`Player State - ${playerState}`);\n      setLoading(playerState !== PLAYING);\n    };\n\n    const onError = (err) => {\n      console.warn('Player Event - ERROR:', err);\n    };\n\n    player.current = IVSPlayer.create();\n    player.current.attachHTMLVideoElement(videoEl.current);\n    player.current.load(streamUrl);\n    player.current.play();\n\n    player.current.addEventListener(READY, onStateChange);\n    player.current.addEventListener(PLAYING, onStateChange);\n    player.current.addEventListener(ENDED, onStateChange);\n    player.current.addEventListener(ERROR, onError);\n\n    return () => {\n      player.current.removeEventListener(READY, onStateChange);\n      player.current.removeEventListener(PLAYING, onStateChange);\n      player.current.removeEventListener(ENDED, onStateChange);\n      player.current.removeEventListener(ERROR, onError);\n    };\n  }, [IVSPlayer, isPlayerSupported, streamUrl]);\n\n  useEffect(() => {\n    const onVisibilityChange = () => {\n      const visible = isElementInViewport(playerBaseEl.current);\n\n      if (visible === visibleRef.current) return;\n\n      visibleRef.current = visible;\n\n      if (visible && player.current.isPaused()) {\n        player.current.play();\n      }\n\n      if (!visible) {\n        const playerRect = playerBaseEl.current.getBoundingClientRect();\n        setPlayerSize({\n          height: `${playerRect.height}px`,\n          width: `${playerRect.width - CORNER_SPACE}px`,\n        });\n      }\n\n      setTimeout(() => {\n        setIsMiniPlayer(!visible);\n      }, 100);\n    };\n\n    if (!isPlayerSupported) {\n      return;\n    }\n\n    onVisibilityChange();\n    updatePlayer(visibleRef.current);\n\n    window.addEventListener('scroll', onVisibilityChange);\n    window.addEventListener('resize', onVisibilityChange);\n\n    return () => {\n      window.removeEventListener('scroll', onVisibilityChange);\n      window.removeEventListener('resize', onVisibilityChange);\n    };\n  }, [isPlayerSupported, updatePlayer]);\n\n  useEffect(() => {\n    updatePlayer(isMiniPlayer);\n  }, [isMiniPlayer, updatePlayer]);\n\n  const close = () => {\n    player.current.pause();\n    setIsMiniPlayer(false);\n  };\n\n  const resize = () => {\n    const { offsetLeft, offsetTop } = playerBaseEl.current;\n\n    window.scrollTo({\n      top: offsetTop - 20,\n      left: offsetLeft,\n      behavior: 'smooth',\n    });\n  };\n\n  const toggleMute = () => {\n    const shouldMute = !player.current.isMuted();\n\n    player.current.setMuted(shouldMute);\n    setMuted(shouldMute);\n  };\n\n  if (!isPlayerSupported) {\n    return null;\n  }\n\n  const { top, right, bottom, left } = playerPosition;\n\n  return (\n    <div className=\"MiniPlayer\" ref={playerBaseEl}>\n      <div className=\"MiniPlayer-videoBox\">\n        <Placeholder loading={loading} />\n\n        <div\n          className={`MinPlayer-video${isMiniPlayer ? ' small' : ''}`}\n          style={{\n            top,\n            right,\n            bottom,\n            left,\n            width: `${playerSize.width}`,\n            height: `${playerSize.height}`,\n            transition:\n              transition && isMiniPlayer\n                ? `height ${TRANSITION}, width ${TRANSITION}`\n                : 'none',\n          }}\n        >\n          <video ref={videoEl} playsInline></video>\n\n          {isMiniPlayer && (\n            <PlayerControls\n              controls={controls}\n              muted={muted}\n              onClose={close}\n              onResize={resize}\n              onMute={toggleMute}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MiniPlayer;\n"]},"metadata":{},"sourceType":"module"}